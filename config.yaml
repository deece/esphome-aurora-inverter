esphome:
  name: inverter
  platform: ESP32
  board: esp32doit-devkit-v1
  includes:
    - ABBAuroraStrings.cpp
    - ABBAuroraStrings.h
    - ABBAuroraEnums.h
    - ABBAurora.cpp
    - ABBAurora.h
    - InverterMonitor.h
  libraries:
    - "Wire"
    
wifi:
  ssid: SSID
  password: ""

#mqtt:
#  broker: mqtt.lan
#  username: mqttuser
#  password: mqttpass
#  discovery: false
#  topic_prefix: null
#  log_topic: null

captive_portal:
logger:
api:
ota:

sensor:
  - platform: custom
    lambda: |-
      auto monitor = InverterMonitor::get_instance();
      App.register_component(monitor);
      App.register_sensor(monitor->v_in_1);
      App.register_sensor(monitor->v_in_2);
      App.register_sensor(monitor->i_in_1);
      App.register_sensor(monitor->i_in_2);
      App.register_sensor(monitor->power_in_1);
      App.register_sensor(monitor->power_in_2);
      App.register_sensor(monitor->power_in_total);
      App.register_sensor(monitor->power_peak_today);
      App.register_sensor(monitor->power_peak_max);
      App.register_sensor(monitor->temperature_inverter);
      App.register_sensor(monitor->temperature_booster);
      App.register_sensor(monitor->cumulated_energy_today);
      App.register_sensor(monitor->cumulated_energy_week);
      App.register_sensor(monitor->cumulated_energy_month);
      App.register_sensor(monitor->cumulated_energy_year);
      App.register_sensor(monitor->cumulated_energy_total);
      App.register_sensor(monitor->grid_voltage);
      App.register_sensor(monitor->grid_current);
      App.register_sensor(monitor->grid_power);
      App.register_sensor(monitor->frequency);
      App.register_sensor(monitor->v_bulk);
      App.register_sensor(monitor->i_leak_dc_dc);
      App.register_sensor(monitor->i_leak_inverter);
      App.register_sensor(monitor->dc_dc_grid_voltage);
      App.register_sensor(monitor->dc_dc_grid_frequency);
      App.register_sensor(monitor->isolation_resistance);
      App.register_sensor(monitor->dc_dc_v_bulk);
      App.register_sensor(monitor->average_grid_voltage);
      App.register_sensor(monitor->v_bulk_mid);
      App.register_sensor(monitor->grid_voltage_neutral);
      App.register_sensor(monitor->wind_generator_frequency);
      App.register_sensor(monitor->grid_voltage_neutral_phase);
      App.register_sensor(monitor->grid_current_phase_r);
      App.register_sensor(monitor->grid_current_phase_s);
      App.register_sensor(monitor->grid_current_phase_t);
      App.register_sensor(monitor->frequency_phase_r);
      App.register_sensor(monitor->frequency_phase_s);
      App.register_sensor(monitor->frequency_phase_t);
      App.register_sensor(monitor->v_bulk_positive);
      App.register_sensor(monitor->v_bulk_negative);
      App.register_sensor(monitor->temperature_supervisor);
      App.register_sensor(monitor->temperature_alim);
      App.register_sensor(monitor->temperature_heat_sink);
      App.register_sensor(monitor->temperature_1);
      App.register_sensor(monitor->temperature_2);
      App.register_sensor(monitor->temperature_3);
      App.register_sensor(monitor->fan_speed_1);
      App.register_sensor(monitor->fan_speed_2);
      App.register_sensor(monitor->fan_speed_3);
      App.register_sensor(monitor->fan_speed_4);
      App.register_sensor(monitor->fan_speed_5);
      App.register_sensor(monitor->power_saturation_limit);
      App.register_sensor(monitor->v_panel_micro);
      App.register_sensor(monitor->grid_voltage_phase_r);
      App.register_sensor(monitor->grid_voltage_phase_s);
      App.register_sensor(monitor->grid_voltage_phase_t);

      return {
        monitor->v_in_1,
        monitor->v_in_2,
        monitor->i_in_1,
        monitor->i_in_2,
        monitor->power_in_1,
        monitor->power_in_2,
        monitor->power_in_total,
        monitor->power_peak_today,
        monitor->power_peak_max,
        monitor->temperature_inverter,
        monitor->temperature_booster,
        monitor->cumulated_energy_today,
        monitor->cumulated_energy_week,
        monitor->cumulated_energy_month,
        monitor->cumulated_energy_year,
        monitor->cumulated_energy_total,
        monitor->grid_voltage,
        monitor->grid_current,
        monitor->grid_power,
        monitor->frequency,
        monitor->v_bulk,
        monitor->i_leak_dc_dc,
        monitor->i_leak_inverter,
        monitor->dc_dc_grid_voltage,
        monitor->dc_dc_grid_frequency,
        monitor->isolation_resistance,
        monitor->dc_dc_v_bulk,
        monitor->average_grid_voltage,
        monitor->v_bulk_mid,
        monitor->grid_voltage_neutral,
        monitor->wind_generator_frequency,
        monitor->grid_voltage_neutral_phase,
        monitor->grid_current_phase_r,
        monitor->grid_current_phase_s,
        monitor->grid_current_phase_t,
        monitor->frequency_phase_r,
        monitor->frequency_phase_s,
        monitor->frequency_phase_t,
        monitor->v_bulk_positive,
        monitor->v_bulk_negative,
        monitor->temperature_supervisor,
        monitor->temperature_alim,
        monitor->temperature_heat_sink,
        monitor->temperature_1,
        monitor->temperature_2,
        monitor->temperature_3,
        monitor->fan_speed_1,
        monitor->fan_speed_2,
        monitor->fan_speed_3,
        monitor->fan_speed_4,
        monitor->fan_speed_5,
        monitor->power_saturation_limit,
        monitor->v_panel_micro,
        monitor->grid_voltage_phase_r,
        monitor->grid_voltage_phase_s,
      };
    sensors:
      - name: PV1 Voltage
        id: v_in_1
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:lightning-bolt-outline"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/v_in_1"
#                  payload: !lambda |-
#                    return to_string(id(v_in_1).state);

      - name: PV2 Voltage
        id: v_in_2
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:lightning-bolt-outline"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/v_in_2"
#                  payload: !lambda |-
#                    return to_string(id(v_in_2).state);

      - name: PV1 Current
        id: i_in_1
        unit_of_measurement: A
        accuracy_decimals: 2
        icon: "mdi:current-ac"
        device_class: current
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/i_in_1"
#                  payload: !lambda |-
#                    return to_string(id(i_in_1).state);

      - name: PV2 Current
        id: i_in_2
        unit_of_measurement: A
        accuracy_decimals: 2
        icon: "mdi:current-ac"
        device_class: current
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/i_in_2"
#                  payload: !lambda |-
#                    return to_string(id(i_in_2).state);

      - name: PV1 Power
        id: power_in_1
        unit_of_measurement: W
        accuracy_decimals: 0
        icon: "mdi:solar-power"
        device_class: power
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/power_in_1"
#                  payload: !lambda |-
#                    return to_string(id(power_in_1).state);

      - name: PV2 Power
        id: power_in_2
        unit_of_measurement: W
        accuracy_decimals: 0
        icon: "mdi:solar-power"
        device_class: power
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/power_in_2"
#                  payload: !lambda |-
#                    return to_string(id(power_in_2).state);

      - name: Total Power In
        id: power_in_total
        unit_of_measurement: W
        accuracy_decimals: 0
        icon: "mdi:solar-power"
        device_class: power
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/power_in_total"
#                  payload: !lambda |-
#                    return to_string(id(power_in_total).state);

      - name: Peak Power Today
        id: power_peak_today
        unit_of_measurement: W
        accuracy_decimals: 0
        icon: "mdi:solar-power"
        device_class: power
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/power_peak_today"
#                  payload: !lambda |-
#                    return to_string(id(power_peak_today).state);

      - name: Peak Power Max
        id: power_peak_max
        unit_of_measurement: W
        accuracy_decimals: 0
        icon: "mdi:solar-power"
        device_class: power
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/power_peak_max"
#                  payload: !lambda |-
#                    return to_string(id(power_peak_max).state);

      - name: Inverter Temperature
        id: inverter_temp
        unit_of_measurement: "°C"
        accuracy_decimals: 2
        icon: "mdi:thermometer"
        device_class: temperature
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/inverter_temp"
#                  payload: !lambda |-
#                    return to_string(id(inverter_temp).state);

      - name: Booster Temperature
        id: booster_temp
        unit_of_measurement: "°C"
        accuracy_decimals: 2
        icon: "mdi:thermometer"
        device_class: temperature
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/booster_temp"
#                  payload: !lambda |-
#                    return to_string(id(booster_temp).state);

      - name: Energy Today
        id: cumulated_energy_today
        unit_of_measurement: "Wh"
        accuracy_decimals: 0
        icon: "mdi:car-battery"
        device_class: energy
        state_class: total_increasing
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/cumulated_energy_today"
#                  payload: !lambda |-
#                    return to_string(id(cumulated_energy_today).state);

      - name: Energy This Week
        id: cumulated_energy_week
        unit_of_measurement: "Wh"
        accuracy_decimals: 0
        icon: "mdi:car-battery"
        device_class: energy
        state_class: total_increasing
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/cumulated_energy_week"
#                  payload: !lambda |-
#                    return to_string(id(cumulated_energy_week).state);

      - name: Energy This Month
        id: cumulated_energy_month
        unit_of_measurement: "Wh"
        accuracy_decimals: 0
        icon: "mdi:car-battery"
        device_class: energy
        state_class: total_increasing
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/cumulated_energy_month"
#                  payload: !lambda |-
#                    return to_string(id(cumulated_energy_month).state);

      - name: Energy This Year
        id: cumulated_energy_year
        unit_of_measurement: "Wh"
        accuracy_decimals: 0
        icon: "mdi:car-battery"
        device_class: energy
        state_class: total_increasing
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/cumulated_energy_year"
#                  payload: !lambda |-
#                    return to_string(id(cumulated_energy_year).state);

      - name: Energy All Time
        id: cumulated_energy_total
        unit_of_measurement: "Wh"
        accuracy_decimals: 0
        icon: "mdi:car-battery"
        device_class: energy
        state_class: total_increasing
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/cumulated_energy_total"
#                  payload: !lambda |-
#                    return to_string(id(cumulated_energy_total).state);

      - name: Grid Voltage
        id: grid_voltage
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_voltage"
#                  payload: !lambda |-
#                    return to_string(id(grid_voltage).state);

      - name: Grid Current
        id: grid_current
        unit_of_measurement: A
        accuracy_decimals: 2
        icon: "mdi:current-ac"
        device_class: current
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_current"
#                  payload: !lambda |-
#                    return to_string(id(grid_current).state);

      - name: Grid Power
        id: grid_power
        unit_of_measurement: W
        accuracy_decimals: 0
        icon: "mdi:flash"
        device_class: power
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_power"
#                  payload: !lambda |-
#                    return to_string(id(grid_power).state);

      - name: Frequency
        id: frequency
        unit_of_measurement: Hz
        accuracy_decimals: 2
        icon: "mdi:sine-wave"
        device_class: frequency
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/frequency"
#                  payload: !lambda |-
#                    return to_string(id(frequency).state);

      - name: Bulk Voltage
        id: v_bulk
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/v_bulk"
#                  payload: !lambda |-
#                    return to_string(id(v_bulk).state);

      - name: DC-DC Grid Voltage
        id: dc_dc_grid_voltage
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/dc_dc_grid_voltage"
#                  payload: !lambda |-
#                    return to_string(id(dc_dc_grid_voltage).state);

      - name: DC-DC Grid Frequency
        id: dc_dc_grid_frequency
        unit_of_measurement: Hz
        accuracy_decimals: 2
        icon: "mdi:sine-wave"
        device_class: frequency
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/dc_dc_grid_frequency"
#                  payload: !lambda |-
#                    return to_string(id(dc_dc_grid_frequency).state);

      - name: Isolation Resistance
        id: isolation_resistance
        unit_of_measurement: Ohm
        accuracy_decimals: 2
        icon: "mdi:resistor"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/isolation_resistance"
#                  payload: !lambda |-
#                    return to_string(id(isolation_resistance).state);

      - name: DC-DC V Bulk
        id: dc_dc_v_bulk
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/dc_dc_v_bulk"
#                  payload: !lambda |-
#                    return to_string(id(dc_dc_v_bulk).state);

      - name: Average Grid Voltage
        id: average_grid_voltage
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/average_grid_voltage"
#                  payload: !lambda |-
#                    return to_string(id(average_grid_voltage).state);

      - name: Bulk Mid Voltage
        id: v_bulk_mid
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/v_bulk_mid"
#                  payload: !lambda |-
#                    return to_string(id(v_bulk_mid).state);

      - name: Grid Voltage Neutral
        id: grid_voltage_neutral
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_voltage_neutral"
#                  payload: !lambda |-
#                    return to_string(id(grid_voltage_neutral).state);

      - name: Wind Generator Frequency
        id: wind_generator_frequency
        unit_of_measurement: Hz
        accuracy_decimals: 2
        icon: "mdi:sine-wave"
        device_class: frequency
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/wind_generator_frequency"
#                  payload: !lambda |-
#                    return to_string(id(wind_generator_frequency).state);

      - name: Grid Voltage Neutral Phase
        id: grid_voltage_neutral_phase
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_voltage_neutral_phase"
#                  payload: !lambda |-
#                    return to_string(id(grid_voltage_neutral_phase).state);

      - name: Grid Current Phase R
        id: grid_current_phase_r
        unit_of_measurement: A
        accuracy_decimals: 2
        icon: "mdi:current-ac"
        device_class: current
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_current_phase_r"
#                  payload: !lambda |-
#                    return to_string(id(grid_current_phase_r).state);

      - name: Grid Current Phase S
        id: grid_current_phase_s
        unit_of_measurement: A
        accuracy_decimals: 2
        icon: "mdi:current-ac"
        device_class: current
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_current_phase_s"
#                  payload: !lambda |-
#                    return to_string(id(grid_current_phase_s).state);

      - name: Grid Current Phase T
        id: grid_current_phase_t
        unit_of_measurement: A
        accuracy_decimals: 2
        icon: "mdi:current-ac"
        device_class: current
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_current_phase_t"
#                  payload: !lambda |-
#                    return to_string(id(grid_current_phase_t).state);

      - name: Frequency Phase R
        id: frequency_phase_r
        unit_of_measurement: Hz
        accuracy_decimals: 2
        icon: "mdi:sine-wave"
        device_class: frequency
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/frequency_phase_r"
#                  payload: !lambda |-
#                    return to_string(id(frequency_phase_r).state);

      - name: Frequency Phase S
        id: frequency_phase_s
        unit_of_measurement: Hz
        accuracy_decimals: 2
        icon: "mdi:sine-wave"
        device_class: frequency
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/frequency_phase_s"
#                  payload: !lambda |-
#                    return to_string(id(frequency_phase_s).state);

      - name: Frequency Phase T
        id: frequency_phase_t
        unit_of_measurement: Hz
        accuracy_decimals: 2
        icon: "mdi:sine-wave"
        device_class: frequency
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/frequency_phase_t"
#                  payload: !lambda |-
#                    return to_string(id(frequency_phase_t).state);

      - name: Bulk Voltage Positive
        id: v_bulk_positive
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/v_bulk_positive"
#                  payload: !lambda |-
#                    return to_string(id(v_bulk_positive).state);

      - name: Bulk Voltage Negative
        id: v_bulk_negative
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/v_bulk_negative"
#                  payload: !lambda |-
#                    return to_string(id(v_bulk_negative).state);

      - name: Temperature Supervisor
        id: temperature_supervisor
        unit_of_measurement: "°C"
        accuracy_decimals: 2
        icon: "mdi:thermometer"
        device_class: temperature
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/temperature_supervisor"
#                  payload: !lambda |-
#                    return to_string(id(temperature_supervisor).state);

      - name: Temperature Alim
        id: temperature_alim
        unit_of_measurement: "°C"
        accuracy_decimals: 2
        icon: "mdi:thermometer"
        device_class: temperature
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/temperature_alim"
#                  payload: !lambda |-
#                    return to_string(id(temperature_alim).state);

      - name: Temperature Heat Sink
        id: temperature_heat_sink
        unit_of_measurement: "°C"
        accuracy_decimals: 2
        icon: "mdi:thermometer"
        device_class: temperature
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/temperature_heat_sink"
#                  payload: !lambda |-
#                    return to_string(id(temperature_heat_sink).state);

      - name: Temperature 1
        id: temperature_1
        unit_of_measurement: "°C"
        accuracy_decimals: 2
        icon: "mdi:thermometer"
        device_class: temperature
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/temperature_1"
#                  payload: !lambda |-
#                    return to_string(id(temperature_1).state);

      - name: Temperature 2
        id: temperature_2
        unit_of_measurement: "°C"
        accuracy_decimals: 2
        icon: "mdi:thermometer"
        device_class: temperature
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/temperature_2"
#                  payload: !lambda |-
#                    return to_string(id(temperature_2).state);

      - name: Temperature 3
        id: temperature_3
        unit_of_measurement: "°C"
        accuracy_decimals: 2
        icon: "mdi:thermometer"
        device_class: temperature
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/temperature_3"
#                  payload: !lambda |-
#                    return to_string(id(temperature_3).state);

      - name: Fan Speed 1
        id: fan_speed_1
        unit_of_measurement: RPM
        accuracy_decimals: 0
        icon: "mdi:fan"
        device_class: speed
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/fan_speed_1"
#                  payload: !lambda |-
#                    return to_string(id(fan_speed_1).state);

      - name: Fan Speed 2
        id: fan_speed_2
        unit_of_measurement: RPM
        accuracy_decimals: 0
        icon: "mdi:fan"
        device_class: speed
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/fan_speed_2"
#                  payload: !lambda |-
#                    return to_string(id(fan_speed_2).state);

      - name: Fan Speed 3
        id: fan_speed_3
        unit_of_measurement: RPM
        accuracy_decimals: 0
        icon: "mdi:fan"
        device_class: speed
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/fan_speed_3"
#                  payload: !lambda |-
#                    return to_string(id(fan_speed_3).state);

      - name: Fan Speed 4
        id: fan_speed_4
        unit_of_measurement: RPM
        accuracy_decimals: 0
        icon: "mdi:fan"
        device_class: speed
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/fan_speed_4"
#                  payload: !lambda |-
#                    return to_string(id(fan_speed_4).state);

      - name: Fan Speed 5
        id: fan_speed_5
        unit_of_measurement: RPM
        accuracy_decimals: 0
        icon: "mdi:fan"
        device_class: speed
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/fan_speed_5"
#                  payload: !lambda |-
#                    return to_string(id(fan_speed_5).state);

      - name: Power Saturation Limit
        id: power_saturation_limit
        unit_of_measurement: W
        accuracy_decimals: 0
        icon: "mdi:flash"
        device_class: power
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/power_saturation_limit"
#                  payload: !lambda |-
#                    return to_string(id(power_saturation_limit).state);

      - name: Panel Micro Voltage
        id: v_panel_micro
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/v_panel_micro"
#                  payload: !lambda |-
#                    return to_string(id(v_panel_micro).state);

      - name: Grid Voltage Phase R
        id: grid_voltage_phase_r
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_voltage_phase_r"
#                  payload: !lambda |-
#                    return to_string(id(grid_voltage_phase_r).state);

      - name: Grid Voltage Phase S
        id: grid_voltage_phase_s
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_voltage_phase_s"
#                  payload: !lambda |-
#                    return to_string(id(grid_voltage_phase_s).state);

      - name: Grid Voltage Phase T
        id: grid_voltage_phase_t
        unit_of_measurement: V
        accuracy_decimals: 2
        icon: "mdi:flash"
        device_class: voltage
        state_class: measurement
#        on_value:
#            then:
#              - mqtt.publish:
#                  topic: "emon/aurora/grid_voltage_phase_t"
#                  payload: !lambda |-
#                    return to_string(id(grid_voltage_phase_t).state);

text_sensor:
  - platform: custom
    lambda: |-
      auto monitor = InverterMonitor::get_instance();
      App.register_text_sensor(monitor->connection_status);
      return { monitor->connection_status };
    text_sensors: 
      #Status
      - name: connection_status
        icon: "mdi:connection"
